class Solution {
public:
    int n, m;
    int count =0;
     bool isSafe( vector<vector<int>>& grid, int i, int j){
        return (i>=0 && j>=0 && i < grid.size() && j < grid[0].size() && grid[i][j] == 1);
    }
   
    int orangesRotting(vector<vector<int>>& grid) {
        int ans =0;
        n = grid.size();
        m = grid[0].size();
        queue<pair <pair<int, int>, int>> q;
        int fresh =0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 2)
                    q.push({{i,j},0});
                else if(grid[i][j] == 1)
                    fresh++;
            }
        }
        while(!q.empty()){
            auto f  = q.front();
            int i = f.first.first;
            int j = f.first.second;
            int level = f.second;
            q.pop();
            int dx[] = {-1,0,0,1};
            int dy[] = {0,-1,1,0};
            ans = max(ans,level);
            for(int k =0;k<4;k++){
                int x = i + dx[k];
                int y = j + dy[k];
                if( isSafe(grid,  x, y)){
                    count++;
                    grid[x][y] = 2;
                    q.push({{x,y},level+1});
                }
        }
            
        }
        return count == fresh?ans: -1;
    }
};
