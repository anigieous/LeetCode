class Solution {
public:
    int temp;
    bool visited[52][52];
    int m,n;
    void dfs(vector<vector<int>>& image, int i, int j, int newColor){
        if(i < 0 || j < 0 || i >= m || j >= n || image[i][j] != temp  || visited[i][j]) return; 
        visited[i][j] = true;
        image[i][j] = newColor;
        int dx[] = {-1,0,0,1};
        int dy[] = {0,-1,1,0};
        for(int k =0;k<4;k++){
            int x = i + dx[k];
            int y = j + dy[k];
            dfs( image, x, y, newColor);
        }
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        memset(visited, false, sizeof(visited));
        temp = image[sr][sc];
        m = image.size();
        n = image[0].size();
        int i = sr;
        int j = sc;
        image[sr][sc] = newColor;
        visited[sr][sc] = true;
        int dx[] = {-1,0,0,1};
        int dy[] = {0,-1,1,0};
        for(int k =0;k<4;k++){
            int x = i + dx[k];
            int y = j + dy[k];
            dfs( image, x, y, newColor);
        }
        return image;
    }
};
