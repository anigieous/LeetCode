class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> mp;
        for(auto st:wordList){
            mp.insert(st);
        }
        if(mp.find(endWord) == mp.end()){
            return 0;
        }
        queue<pair<string, int>> q;
        q.push({beginWord, 1});
        
        while(!q.empty()){
            auto t = q.front();
            string str = t.first;
            int level = t.second;
            q.pop();
            for(int i=0;i<str.size();i++){
                for(char c = 'a';c <= 'z'; c++){
                    string temp = str;
                    temp[i] = c;
                    if(temp == endWord){
                        return level+1;
                    }
                    else if(mp.find(temp) != mp.end() && temp != str){
                        q.push({temp, level+1});
                        mp.erase(temp);
                    }
                }
            }
        }
        return 0;
    }
};
