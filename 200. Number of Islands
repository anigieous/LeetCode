class Solution {
public:
    bool isSafe( vector<vector<char>>& grid,vector<vector<int>>& visited, int i, int j){
        return (i>=0 && j>=0 && i < grid.size() && j < grid[0].size() && visited[i][j] == 0 && grid[i][j] == '1');
    }
    void dfs(vector<vector<int>>& visited, vector<vector<char>>& grid, int i, int j){
        visited[i][j] = 1;
        int dx[] = {-1,0,0,1};
        int dy[] = {0,-1,1,0};
        for(int k =0;k<4;k++){
            int x = i + dx[k];
            int y = j + dy[k];
            if( isSafe(grid, visited, x, y)){
                dfs(visited, grid, x, y);
            }
        }
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        int count = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == '1' && visited[i][j] == 0){
                    count++;
                    dfs(visited, grid, i, j);
                }
            }
        }
        return count;
    }
};
